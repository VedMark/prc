/*
 * Please do not edit this file.
 * It was generated using stubgen.
 */

#include <memory.h>
#include <sys/socket.h>
#include "client.h"
#include "maths.h"

#define RECV_BUFFER_LENGTH ((unsigned long) (0x1000))

extern SpdLogger logger;

float *sqr_1(float* argp, ClientRPC *client) {
    const char * message = nullptr;
    char messageBuff[RECV_BUFFER_LENGTH];
    send_message request{MATH_PROG,
                         1,
                         SQR,
                         sizeof(*argp),
                         reinterpret_cast<char *>(argp)};

    message = request.getSendMessage();

    write(client->getSocketDescriptor(),
         message,
         sizeof(send_message) + request.szData);

    delete message;
    ssize_t receivedSize = 0;

    receivedSize = read(client->getSocketDescriptor(),
                        messageBuff,
                        RECV_BUFFER_LENGTH);

    if(receivedSize < 0) {
        return nullptr;
    }

    receive_message answer{};
    answer.readReceiveMessage(messageBuff);

    if(answer.status == ERROR) {
        return nullptr;
    }

    return reinterpret_cast<float *>(answer.data);
}

float *
exp_1(float* argp, ClientRPC *client) {
    static float clnt_res;

    return (&clnt_res);
}

float *
log10_1(float* argp, ClientRPC *client) {
    static float clnt_res;

    return (&clnt_res);
}

float *
sqr_2(float* argp, ClientRPC *client) {
    static float clnt_res;

    return (&clnt_res);
}

float *
exp_2(float* argp, ClientRPC *client) {
    static float clnt_res;

    return (&clnt_res);
}

float *
log10_2(float* argp, ClientRPC *client) {
    static float clnt_res;

    return (&clnt_res);
}

float *
abs_2(float* argp, ClientRPC *client) {
    static float clnt_res;

    return (&clnt_res);
}
